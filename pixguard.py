import os
import sys
import json
import webbrowser
import random
import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestClassifier
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, accuracy_score
import scipy.sparse
import joblib
from datetime import datetime

class HistoryStack:

    def __init__(self, path='historico_transacoes.json'):

        self.path = path
        self.items = self._load()
        # top_index aponta para o √≠ndice do √∫ltimo elemento adicionado (o "topo").
        # -1 indica que a pilha est√° vazia.
        self.top_index = len(self.items) - 1 

    def _load(self):
        """
        Carrega o hist√≥rico de transa√ß√µes do arquivo JSON.
        Se o arquivo n√£o existir ou estiver corrompido, retorna uma lista vazia.
        """
        if os.path.exists(self.path):
            try:
                with open(self.path, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    # Garante que o conte√∫do carregado seja uma lista
                    if not isinstance(data, list):
                        return []
                    return data
            except json.JSONDecodeError:
                # Retorna lista vazia se o JSON estiver malformado
                return []
        return []

    def _save(self):
        """
        Salva o hist√≥rico atual (self.items) no arquivo JSON.
        """
        with open(self.path, 'w', encoding='utf-8') as f:
            json.dump(self.items, f, ensure_ascii=False, indent=4)

    def push(self, item):
        """
        Adiciona um novo item ao "topo" da pilha.
        """
        self.items.append(item) # Adiciona ao final da lista, que √© o topo da pilha
        self.top_index = len(self.items) - 1 # Atualiza o √≠ndice do topo
        self._save() # Salva o estado da pilha ap√≥s a adi√ß√£o

    def pop(self):
        """
        Remove e retorna o item do "topo" da pilha (o √∫ltimo item adicionado).
        A remo√ß√£o √© feita manualmente, sem usar o m√©todo list.pop() nativo.
        """
        if self.top_index == -1:
            # A pilha est√° vazia
            return None

        # Pega o item do topo antes de remov√™-lo
        removed_item = self.items[self.top_index]
        
        # Cria uma nova lista contendo todos os elementos, exceto o √∫ltimo.
        # Isso simula a remo√ß√£o do topo de forma manual.
        self.items = self.items[:self.top_index]
        
        # Atualiza o √≠ndice do topo para a nova pilha (ou -1 se estiver vazia)
        self.top_index = len(self.items) - 1 

        self._save() # Salva o estado da pilha ap√≥s a remo√ß√£o
        return removed_item

    def get_all(self):
        """
        Retorna uma c√≥pia de todos os itens atualmente na pilha.
        
        Returns:
            list: Uma c√≥pia da lista de itens da pilha.
        """
        return list(self.items)
    
# Configura√ß√µes do projeto
DIRETORIO_ATUAL = os.path.dirname(os.path.abspath(__file__))
DIRETORIO_DADOS = os.path.join(DIRETORIO_ATUAL, "data")
DIRETORIO_MODELOS = os.path.join(DIRETORIO_ATUAL, "models")

# Garantir que os diret√≥rios existam
os.makedirs(DIRETORIO_DADOS, exist_ok=True)
os.makedirs(DIRETORIO_MODELOS, exist_ok=True)

# Caminho para o arquivo HTML
ARQUIVO_HTML = os.path.join(DIRETORIO_ATUAL, "pixguard_standalone.html")

# Caminho para as imagens
IMAGEM_BRADESCO = os.path.join(DIRETORIO_ATUAL, "bradesco_logo.png")
IMAGEM_FACULDADE = os.path.join(DIRETORIO_ATUAL, "faculdade_logo.png")

# Verificar se as imagens existem
if not os.path.exists(IMAGEM_BRADESCO):
    print(f"AVISO: Imagem do Bradesco n√£o encontrada em {IMAGEM_BRADESCO}")
    
if not os.path.exists(IMAGEM_FACULDADE):
    print(f"AVISO: Imagem da faculdade n√£o encontrada em {IMAGEM_FACULDADE}")

# Classe para o modelo de IA
class ModeloPixGuard:
    def __init__(self):
        self.historico = HistoryStack(os.path.join(DIRETORIO_DADOS, "historico_transacoes.json"))
        self.modelo = None
        self.vetorizador = None
        
        modelo_path = os.path.join(DIRETORIO_MODELOS, "modelo_pixguard.pkl")
        vetor_path = os.path.join(DIRETORIO_MODELOS, "vetor_tfidf_pixguard.pkl")
        
        if os.path.exists(modelo_path) and os.path.exists(vetor_path):
            print("Carregando modelo existente...")
            self.modelo = joblib.load(modelo_path)
            self.vetorizador = joblib.load(vetor_path)
        else:
            print("Treinando novo modelo...")
            self._treinar_modelo()

    def _treinar_modelo(self):
        """Treina o modelo com separa√ß√£o adequada dos dados para evitar overfitting"""
        print("Gerando dados sint√©ticos...")
        dados = self._gerar_dados_sinteticos()
        
        # Preparar features
        X_valor = dados[['valor', 'chave_nova']]
        X_mensagem = dados['mensagem']
        y = dados['rotulo']
        
        # ===== SEPARA√á√ÉO DOS DADOS PARA EVITAR OVERFITTING =====
        print("Separando dados em treino e teste...")
        X_valor_train, X_valor_test, X_msg_train, X_msg_test, y_train, y_test = train_test_split(
            X_valor, X_mensagem, y, 
            test_size=0.2,           # 20% para teste
            random_state=42,         # Reprodutibilidade
            stratify=y              # Manter propor√ß√£o das classes
        )
        
        print(f"Dados de treino: {len(X_valor_train)} amostras")
        print(f"Dados de teste: {len(X_valor_test)} amostras")
        
        # Treinar vetorizador APENAS com dados de treino
        self.vetorizador = TfidfVectorizer()
        X_msg_train_tfidf = self.vetorizador.fit_transform(X_msg_train)
        
        # Preparar dados de treino
        X_numerico_train_sparse = scipy.sparse.csr_matrix(X_valor_train.values)
        X_train_final = scipy.sparse.hstack((X_numerico_train_sparse, X_msg_train_tfidf))
        
        # Treinar modelo
        print("Treinando modelo Random Forest...")
        self.modelo = RandomForestClassifier(n_estimators=100, random_state=42)
        self.modelo.fit(X_train_final, y_train)
        
        # ===== AVALIA√á√ÉO NO CONJUNTO DE TESTE =====
        print("Avaliando modelo no conjunto de teste...")
        
        # Transformar dados de teste (SEM fit, apenas transform!)
        X_msg_test_tfidf = self.vetorizador.transform(X_msg_test)
        X_numerico_test_sparse = scipy.sparse.csr_matrix(X_valor_test.values)
        X_test_final = scipy.sparse.hstack((X_numerico_test_sparse, X_msg_test_tfidf))
        
        # Fazer predi√ß√µes no conjunto de teste
        y_pred = self.modelo.predict(X_test_final)
        
        # Calcular m√©tricas
        accuracy = accuracy_score(y_test, y_pred)
        print(f"\nüìä RESULTADOS DA AVALIA√á√ÉO:")
        print(f"Acur√°cia no conjunto de teste: {accuracy:.3f}")
        print(f"\nRelat√≥rio detalhado:")
        print(classification_report(y_test, y_pred))
        
        # Salvar modelo
        joblib.dump(self.modelo, os.path.join(DIRETORIO_MODELOS, "modelo_pixguard.pkl"))
        joblib.dump(self.vetorizador, os.path.join(DIRETORIO_MODELOS, "vetor_tfidf_pixguard.pkl"))
        print("‚úÖ Modelo treinado e salvo com sucesso!")

    def _gerar_dados_sinteticos(self):
        mensagens_normais = [
            "Pagamento da pizzaria", "Presente de anivers√°rio", "Transfer√™ncia para conta pr√≥pria",
            "Mensalidade da escola", "Aluguel do m√™s", "Compra no mercado", "Pagamento de academia",
            "Doa√ß√£o para ONG", "Compra online", "Pagamento de servi√ßo de limpeza", "Conta de luz",
            "Conta de √°gua", "Conta de internet", "Pagamento de streaming", "Presente para amigo",
            "Divis√£o de conta do restaurante", "Pagamento de curso", "Compra de livro",
            "Pagamento de aplicativo", "Transfer√™ncia para familiar"
        ]
        mensagens_golpes = [
            "Urgente, estou no hospital", "Ajuda, estou preso", "Pague agora para liberar o pr√™mio",
            "Deposite para regularizar d√≠vida", "Multa judicial, pagamento imediato",
            "Socorro, preciso pagar cirurgia", "Empr√©stimo aprovado, envie taxa",
            "Atualiza√ß√£o de boleto, novo c√≥digo", "Problema na conta, transfira j√°",
            "Parente em perigo, mande dinheiro", "Seu cart√£o foi bloqueado, regularize",
            "Ganhou sorteio, pague taxa de libera√ß√£o", "D√≠vida em seu nome, regularize agora",
            "Imposto atrasado, pague com urg√™ncia", "Conta ser√° bloqueada, transfira agora",
            "Seu benef√≠cio ser√° cancelado, confirme dados", "Promo√ß√£o exclusiva, pague reserva",
            "Problema com entrega, pague taxa", "Seu cadastro expirou, renove agora",
            "Sua conta foi invadida, transfira saldo"
        ]
        transacoes = []
        for _ in range(140):
            transacoes.append({"valor": random.randint(10, 2000), "chave_nova": random.choice([0, 0, 0, 1]),
                               "mensagem": random.choice(mensagens_normais), "rotulo": "normal"})
        for _ in range(60):
            transacoes.append({"valor": random.randint(500, 10000), "chave_nova": random.choice([0, 1, 1, 1]),
                               "mensagem": random.choice(mensagens_golpes), "rotulo": "golpe"})
        random.shuffle(transacoes)
        df = pd.DataFrame(transacoes)
        df.to_json(os.path.join(DIRETORIO_DADOS, "dados_transacoes.json"), orient="records", force_ascii=False, indent=4)
        return df

    def analisar_transacao(self, dados):
        if self.modelo is None or self.vetorizador is None:
            print("ERRO: Modelo n√£o carregado!")
            return {"predicao": "erro", "probabilidade_golpe": 0.5, "risco": "M√©dio"}
        try:
            entrada_numerica = [[dados['valor'], int(dados['chave_nova'])]]
            entrada_numerica_sparse = scipy.sparse.csr_matrix(entrada_numerica)
            entrada_mensagem_tfidf = self.vetorizador.transform([dados['mensagem']])
            entrada_final = scipy.sparse.hstack((entrada_numerica_sparse, entrada_mensagem_tfidf))
            predicao = self.modelo.predict(entrada_final)[0]
            probabilidade = self.modelo.predict_proba(entrada_final)[0]
            classes = self.modelo.classes_
            indice_golpe = np.where(classes == 'golpe')[0][0]
            probabilidade_golpe = probabilidade[indice_golpe]
            risco = "Alto" if probabilidade_golpe > 0.7 else "M√©dio" if probabilidade_golpe > 0.4 else "Baixo"
            self.historico.push({
                'valor': dados['valor'],
                'chave_nova': dados['chave_nova'],
                'mensagem': dados['mensagem'],
                'predicao': predicao,
                'risco': risco,
                'probabilidade': round(float(probabilidade_golpe), 2)
            })
            return {"predicao": predicao, "probabilidade_golpe": float(probabilidade_golpe), "risco": risco}
        except Exception as e:
            print(f"ERRO na an√°lise: {str(e)}")
            return self._analisar_por_regras(dados)

    def _analisar_por_regras(self, dados):
        palavras_suspeitas = ['urgente', 'emerg√™ncia', 'socorro', 'ajuda', 'hospital', 'acidente', 'pr√™mio', 'ganhou',
                              'multa', 'judicial', 'bloqueado', 'regularizar', 'd√≠vida', 'imposto', 'taxa',
                              'devolver', 'confirmar', 'dados', 'senha', 'c√≥digo']
        fatores_risco = 0
        if dados['valor'] > 3000:
            fatores_risco += 2
        elif dados['valor'] > 1000:
            fatores_risco += 1
        if dados['chave_nova'] == 1:
            fatores_risco += 2
        mensagem_lower = dados['mensagem'].lower()
        for palavra in palavras_suspeitas:
            if palavra in mensagem_lower:
                fatores_risco += 1
        max_fatores = 8
        probabilidade_golpe = max(0.05, min(0.95, fatores_risco / max_fatores))
        predicao = 'golpe' if probabilidade_golpe > 0.7 else 'golpe' if probabilidade_golpe > 0.55 else 'normal'
        risco = 'Alto' if probabilidade_golpe > 0.7 else 'M√©dio' if probabilidade_golpe > 0.4 else 'Baixo'
        return {"predicao": predicao, "probabilidade_golpe": probabilidade_golpe, "risco": risco}


def main():
    print("=" * 60)
    print("PixGuard - Sistema de Detec√ß√£o de Golpes em Transa√ß√µes Pix")
    print("=" * 60)
    print("\nIniciando sistema...\n")
    try:
        print("Inicializando modelo de IA...")
        modelo = ModeloPixGuard()
        if not os.path.exists(ARQUIVO_HTML):
            print(f"ERRO: Arquivo HTML n√£o encontrado em {ARQUIVO_HTML}")
            return
        print("\nAbrindo navegador...")
        webbrowser.open('file://' + os.path.abspath(ARQUIVO_HTML))
        print("\n" + "=" * 60)
        print("PixGuard iniciado com sucesso!")
        print("=" * 60)
        print("\nO sistema est√° rodando no seu navegador.")
        print("Para analisar transa√ß√µes, preencha o formul√°rio na interface.")
        print("\nPressione Ctrl+C para encerrar o sistema.")

        while True:
            comando = input("\nDigite 'sair' para encerrar: ")
            if comando.lower() == 'sair':
                break

    except KeyboardInterrupt:
        print("\nEncerrando PixGuard...")
    except Exception as e:
        print(f"\nErro ao iniciar PixGuard: {str(e)}")
    finally:
        print("\nPixGuard encerrado.")

if __name__ == "__main__":
    main()

